#!/bin/bash
# version="0.1"
#
# ARG_HELP([Export a JKS certificate and private key as PEM files])
# ARG_OPTIONAL_SINGLE([keytool-path],[k],[path of keytool],[keytool])
# ARG_OPTIONAL_SINGLE([openssl-path],[o],[path of openssl],[openssl])
# ARG_POSITIONAL_SINGLE([storepath],[Path to target key store])
# ARG_POSITIONAL_SINGLE([storepass],[Password to store])
# ARG_POSITIONAL_SINGLE([alias],[Alias of target key])
# ARG_POSITIONAL_SINGLE([outputDirPath],[Path to directory where key/cert should be output])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='hko'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_keytool_path="keytool"
_arg_openssl_path="openssl"

print_help ()
{
	printf '%s\n' "Export a JKS certificate and private key as PEM files"
	printf 'Usage: %s [-h|--help] [-k|--keytool-path <arg>] [-o|--openssl-path <arg>] <storepath> <storepass> <alias> <outputDirPath>\n' "$0"
	printf '\t%s\n' "<storepath>: Path to target key store"
	printf '\t%s\n' "<storepass>: Password to store"
	printf '\t%s\n' "<alias>: Alias of target key"
	printf '\t%s\n' "<outputDirPath>: Path to directory where key/cert should be output"
	printf '\t%s\n' "-h,--help: Prints help"
	printf '\t%s\n' "-k,--keytool-path: path of keytool (default: 'keytool')"
	printf '\t%s\n' "-o,--openssl-path: path of openssl (default: 'openssl')"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-k|--keytool-path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_keytool_path="$2"
				shift
				;;
			--keytool-path=*)
				_arg_keytool_path="${_key##--keytool-path=}"
				;;
			-k*)
				_arg_keytool_path="${_key##-k}"
				;;
			-o|--openssl-path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_openssl_path="$2"
				shift
				;;
			--openssl-path=*)
				_arg_openssl_path="${_key##--openssl-path=}"
				;;
			-o*)
				_arg_openssl_path="${_key##-o}"
				;;
			*)
				_positionals+=("$1")
				;;
		esac
		shift
	done
}


handle_passed_args_count ()
{
	_required_args_string="'storepath', 'storepass', 'alias' and 'outputDirPath'"
	test ${#_positionals[@]} -ge 4 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 4 (namely: $_required_args_string), but got only ${#_positionals[@]}." 1
	test ${#_positionals[@]} -le 4 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 4 (namely: $_required_args_string), but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
}

assign_positional_args ()
{
	_positional_names=('_arg_storepath' '_arg_storepass' '_arg_alias' '_arg_outputdirpath' )

	for (( ii = 0; ii < ${#_positionals[@]}; ii++))
	do
		eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


TEMP_KEYSTORE_PATH="ssl.temp.p12"
$_arg_keytool_path -importkeystore -srckeystore $_arg_storepath \
-deststorepass $_arg_storepass -srcstorepass $_arg_storepass \
-deststoretype PKCS12 -srcalias $_arg_alias -noprompt \
-destkeystore $TEMP_KEYSTORE_PATH && \

mkdir -p $_arg_outputdirpath && \

$_arg_openssl_path pkcs12 -in $TEMP_KEYSTORE_PATH -nokeys -password "pass:$_arg_storepass" \
-out "$_arg_outputdirpath/$_arg_alias.pem" && \
$_arg_openssl_path pkcs12 -in $TEMP_KEYSTORE_PATH -nodes -nocerts -password "pass:$_arg_storepass" \
-out "$_arg_outputdirpath/$_arg_alias.key.pem"

rm -f -v $TEMP_KEYSTORE_PATH

# ] <-- needed because of Argbash
